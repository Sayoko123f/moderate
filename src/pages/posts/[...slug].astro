---
import "@/styles/markdown.css";
import Layout from "@/layouts/Layout.astro";
import { getPosts } from "@/utils/content";
import { tagURL, calcPostFilePath } from "@/utils/url";
import TheHtmlHead from "@/layouts/TheHtmlHead.astro";
import { themeConfig } from "@/theme-config";
import { loadImage } from "@/utils/load-image";
import { undefined } from "astro:schema";

export async function getStaticPaths() {
  const postEntries = await getPosts();
  return postEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { profile } = themeConfig;
const { entry } = Astro.props;
const { Content } = await entry.render();
const tags = entry.data.tags;

async function structuredData() {
  let image: URL | string | undefined;
  const jsonLd = {
    "@context": "https://schema.org",
    "@type": "BlogPosting",
    headline: entry.data.title,
    description: entry.data.description || entry.data.title,
    keywords: entry.data.tags,
    author: {
      "@type": "Person",
      name: themeConfig.profile.name,
      url: Astro.site,
    },
    datePublished: entry.data.published,
    inLanguage: themeConfig.lang?.replace("_", "-"),
    image: void 0 as URL | string | undefined,
  };
  if (entry.data.cover && Astro.site) {
    const { localImage, urlIfNotLocal } = await loadImage({
      src: entry.data.cover,
      basePath: calcPostFilePath(entry),
    });
    if (localImage) {
      image = new URL(localImage.src, Astro.site);
    } else if (urlIfNotLocal) {
      if (urlIfNotLocal.startsWith("/")) {
        image = new URL(urlIfNotLocal, Astro.site);
      } else {
        image = urlIfNotLocal;
      }
    }
    jsonLd.image = image;
  }
  return jsonLd;
}
const jsonLd = await structuredData();
---

<Layout>
  <Fragment slot="html-head">
    <TheHtmlHead
      title={entry.data.title}
      description={entry.data.description}
      ogImageURL={jsonLd.image?.toString()}
    />
    <script
      is:inline
      type="application/ld+json"
      set:html={JSON.stringify(jsonLd)}
    />
  </Fragment>
  <article class="mx-auto max-w-[680px]">
    <h1 class="post-title">{entry.data.title}</h1>
    {
      entry.data.description && (
        <h2 class="post-subtitle">{entry.data.description}</h2>
      )
    }
    <div class="markdown mb-[68px] max-w-4xl">
      <Content />
    </div>
    {
      tags.length && (
        <div class="flex flex-wrap gap-x-2 gap-y-5">
          {tags.map((tag) => (
            <a href={tagURL(tag)}>
              <span class="rounded-3xl bg-neutral px-4 py-2 text-sm">
                {tag}
              </span>
            </a>
          ))}
        </div>
      )
    }
    <div class="pb-[140px]"></div>
  </article>
  <footer class="bg-footer-bg pt-[72px]">
    <div class="mx-auto max-w-[680px]">
      <div class="mb-4 size-[72px] overflow-hidden">
        {
          profile.avatar && (
            <img
              class="max-h-full rounded-full object-contain"
              src={profile.avatar.src}
              alt={profile.name}
            />
          )
        }
      </div>
      <div class="text-2xl">{profile.name}</div>
      <div class="mt-4 text-sm">{profile.bio}</div>
      <div class="border-b border-footer-neutral pb-10"></div>
      <div class="pt-10">
        <p>更多文章</p>
      </div>
    </div>
  </footer>
  <script src="@/scripts/pswp.ts"></script>
  <script src="@/scripts/youtube-loader.ts"></script>
</Layout>
