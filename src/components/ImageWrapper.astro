---
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";
import path from "node:path";
import { joinBaseURL } from "@/utils/url";

interface Props {
  alt?: string;
  basePath?: string;
  src: string;
}

const { src, alt = "", basePath = "/" } = Astro.props;

const isLocal = !(
  src.startsWith("/") ||
  src.startsWith("http") ||
  src.startsWith("https") ||
  src.startsWith("data:")
);
const isPublic = src.startsWith("/");
let localImage: ImageMetadata | undefined;

async function calcLocalImage(): Promise<ImageMetadata> {
  const allImageFiles = import.meta.glob(
    "../**/*.{jpeg,webp,jpg,png,svg,gif,avif}",
    { import: "default" }
  );
  const srcDir = "..";
  const imagePath = path.join(srcDir, path.dirname(basePath), src);
  const importPath = path.normalize(imagePath).replaceAll("\\", "/");
  const imgModule = await allImageFiles[importPath]();
  if (!imgModule) {
    throw new Error(
      `[ERROR] Not found image file, originalInput=${src}, importPath=${importPath}, basePath=${basePath}.`
    );
  }
  return imgModule as ImageMetadata;
}

if (isLocal) {
  localImage = await calcLocalImage();
}
---

{localImage && <Image src={localImage} alt={alt} />}

{!isLocal && <img src={isPublic ? joinBaseURL(src) : src} />}
